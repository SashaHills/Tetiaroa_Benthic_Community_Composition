#### DESCRIPTION ####
# This script was used to pre-process benthic data exported from the 
# CoralNet platform. The 1009 images annotated in CoralNet are summarized
# to produce site-level averages of percent cover (%) for several benthic
# groups in preparation for subsequent statistical analyses. Benthic cover
# data are then compiled with a dataset of spatially co-occuring biogeophysical
# predictors, which are checked for (multi)collinearity. Benthic survey data
# were collected at 12 sites distributed around Tetiaroa Atoll, French 
# Polynesia by Rosalie Wright (University of Oxford) and Casey Benkwitt 
# (Lancaster University) from November 6â€“14, 2021. 

#### REQUIRED PACKAGES ####
# install packages (first run only)
# install.packages(c("tidyverse", "dplyr", "readxl", "ggplot2",
#                    "here", "usdm", "easypackages", "PNWColors", 
#                    "sp", "sf", "raster", "corrplot", "easypackages",
#                    "Cairo"))
# load easypackages, then use its libraries() function to load all others
library(easypackages)
libraries("tidyverse", "dplyr", "readxl", "ggplot2",
          "here", "usdm", "easypackages", "PNWColors", 
          "sp", "sf", "raster", "corrplot", "Cairo")
# multiple packages have the functions select() and filter(), tell R to 
# prioritize these functions from the dplyr package
conflicted::conflict_prefer("select", "dplyr")
conflicted::conflict_prefer("filter", "dplyr")

#### BENTHIC DATA PREP ####
# check working directory
getwd()
# set working directory and point the here package to where we are
setwd("E:/Data/Tetiaroa_2021/")
here::i_am(".here")
here::here() # double check that here is looking in the right place.
# here will allow us to use relative file paths moving forward.

# read in the raw data file exported from our CoralNet project
data = read.csv(here("Benthic_Analysis", "Data", 
                     "CoralNet_Percent_Covers_2021.csv"))

# look at the last 5 rows, as CoralNet typically writes out summary data
# calculated across all images as the final row. If so, we need to remove it.
tail(data$Image.ID, n = 5) 
data = data[-nrow(data), ] # remove summary data in the final row
#View(data) # view the resulting data

# some rows are missing the "_" that separates the transect ID and image ID,
# let's fix that
pattern = "aie_south_benthic(1|2)(\\d{5}\\.jpg)" # original pattern
replacement = "aie_south_benthic\\1_\\2" # desired pattern

# apply the replacement only to rows matching the original pattern
data$Image.name = gsub(pattern, replacement, data$Image.name)

# remove intermediate products
rm(list = c("pattern", "replacement"))

# now separate the Image.name column into four columns: motu, site, 
# transect, and image number.
data_separated = data %>%
  mutate(filename = Image.name) %>%
  separate(Image.name, into = c("part1", "part2", "part3", "part4"),
           sep = "_", fill = "right", extra = "merge") %>%
  mutate(motu = part1,
         # if there is no site information, add NA
         site = ifelse(str_detect(part2, "benthic"), NA, part2), 
         transect = ifelse(is.na(site), part2, part3),
         image = ifelse(is.na(site), part3, part4)) %>%
  relocate(filename, .after = Image.ID) %>%
  relocate(motu, .after = filename) %>%
  relocate(site, .after = motu) %>%
  relocate(transect, .after = site) %>%
  relocate(image, .after = transect) %>%
  # keep the columns with our desired names, remove those called "parts"
  select(-part1, -part2, -part3, -part4) 

# check that the motus are referred to consistently across images, dates,
# observers, etc. motus should be abbreviated by their first three letters.
unique(data_separated$motu)

# do some renaming of motus to ensure consistency across the data.
data_separated$motu = ifelse(data_separated$motu == "aie", "Aie", data_separated$motu)
data_separated$motu = ifelse(data_separated$motu == "Reiono", "Rei", data_separated$motu)
data_separated$motu = ifelse(data_separated$motu == "Rimatuu", "Rim", data_separated$motu)
data_separated$motu = ifelse(data_separated$motu == "rimatuu", "Rim", data_separated$motu)
unique(data_separated$motu) # looks good

# check out the unique combinations of motu and site. Rim, Rei, and Aie should
# be the only motus with two sites each (one on each side of the island), all
# other motus should have NA values for site.
print(unique((data_separated %>%
                group_by(motu, site) %>%
                select(motu, site))))

# we're not convinced by the Porites nodifera annotations, as this species
# is native to the Indian Ocean and has a small geographic range. This is 
# likely another Porites sub-massive coral in the Pacific that was mis-
# identified. So add these percent cover values to the general Porites 
# submassive column instead. 
data_separated = data_separated %>%
  mutate(PorSM = PoNod + PorSM) %>%
  select(-PoNod)

# calculate site-level average percent cover values for all benthic columns
# (AKA those between Acr_arb and Turf_sand), do this by grouping by motu and
# site. exclude the transect tape annotation at this stage too. 
avg_data = data_separated %>%
  select(-TT) %>% # drops the transect tape column
  group_by(motu, site) %>% # group by motu and site
  summarize( # calculate summary stats
    across(Acr_arb:Turf_sand, # across these columns
           mean, # calculate the mean value
           na.rm = TRUE, # remove NA values when calculating the mean
           .names = "avg_{.col}")) %>% # add "avg_" to the front of column names
  ungroup()

# save this data for reference
write.csv(avg_data, 
          here("Benthic_Analysis", "Data",
               "Site_Level_Averages_All_Benthic_Types.csv"),
          row.names = F)

##### RQ1: Benthic community composition data #####
# now combine all live benthic substrates other than hard coral, macroalgae,
# and turf into a general "Live benthos" column. Live benthos will include:
# Corallimorpharia, sea cucumbers, giant clams, soft coral, and sponges.
# also remove fish at this stage
community_data = avg_data %>%
  group_by(motu, site) %>%
  mutate(avg_live_benthos = sum(avg_Collimorph,
                                avg_cucumber,
                                avg_GiCl,
                                avg_SC,
                                avg_SP,
                                avg_FISH,
                                na.rm = TRUE)) %>%
  select(-c(avg_Collimorph, avg_cucumber, avg_GiCl, avg_SC, avg_SP, avg_FISH))

# remove columns where every value is 0 (AKA these groups were never seen)
community_data = community_data[, colSums(community_data != 0, na.rm = TRUE) > 0]

# combine sub-classes for simplicity
community_data = community_data %>%
  group_by(motu, site) %>%
  # combine turf sub-classes
  mutate(Turf = sum(avg_Turf,
                    avg_Turf_rubbl,
                    avg_Turf_sand,
                    na.rm = TRUE)) %>%
  # combine macroalgae sub-classes
  mutate(Macroalgae = sum(avg_MAL,
                          avg_Turbin,
                          na.rm = TRUE)) %>%
  # combine Porites massive and submassive sub-classes because these are
  # challenging to confidently distinguish between in CoralNet due to the 
  # angle and height at which pictures were taken over the reef. although the
  # sub-classes are different ecologically, there is ambiguity between them 
  # due to the nature of our image analysis process, so we'll combine them
  mutate(Por_mass_submassive = sum(avg_Por_mass,
                                   avg_PorSM,
                                   na.rm = TRUE)) %>%
  # combine rubble and coral rubble (dead coral pieces) sub-classes
  mutate(Rubble = sum(avg_Rubble,
                      avg_C.Rubble,
                      na.rm = TRUE)) %>%
  select(-c(avg_Turf, avg_Turf_rubbl, avg_Turf_sand, avg_MAL, avg_Turbin,
            avg_Por_mass, avg_PorSM, avg_Rubble, avg_C.Rubble))

# rename columns in the community data for clarity, 
# using rename(NEW NAME = OLD NAME)
community_data = community_data %>%
  rename(Motu = motu,
         Site = site,
         Acropora_arborescent = avg_Acr_arb,
         Acropora_corymbose = avg_Acr_corym,
         Favites_encrusting = avg_faienc,
         Montipora_encrusting = avg_Monti_encr,
         Pavona_cactus = avg_PavCac,
         Pavona_varians = avg_PavVar,
         Porites_rus = avg_PorRus,
         Sand = avg_Sand,
         Dead_coral = avg_D_coral,
         Pavement = avg_Pavement,
         Sand_rubble = avg_SaRub,
         CCA = avg_CCA,
         Live_benthos = avg_live_benthos,
         Porites_massive_submassive = Por_mass_submassive) %>%
  relocate(Porites_massive_submassive, .after = Porites_rus)

##### RQ2: Hard coral data #####
# remove all benthic columns other than hard coral 
coral_data = community_data %>%
  select(-c(Sand, Dead_coral, Pavement, Sand_rubble, CCA, Live_benthos,
            Turf, Macroalgae, Rubble))

##### add GPS coordinates #####
# here are the starting and ending coordinates for all transects
gps_transect = read.csv(here("Benthic_Analysis", "Data",
                             "Transect_Coordinates.csv"))
str(gps_transect)

# calculate the center longitude and latitude coordinates for each site
gps_site = gps_transect %>%
  group_by(Motu, Site, Site_number__focal_motus_) %>%
  mutate(Longitude_mid = mean(Longitude),
         Latitude_mid = mean(Latitude)) %>%
  select(Data, Contributors, Date, Time, Motu, Site, 
         Site_number__focal_motus_, Longitude_mid, 
         Latitude_mid) %>%
  distinct()

# change the motu names to match the benthic data (3 letter motu abbreviations)
gps_site$Motu = ifelse(gps_site$Motu == "Rimatuu", "Rim", gps_site$Motu)
gps_site$Motu = ifelse(gps_site$Motu == "Reiono", "Rei", gps_site$Motu)
gps_site$Motu = ifelse(gps_site$Motu == "Hiranae/Auroa", "Aur", gps_site$Motu)
gps_site$Motu = ifelse(gps_site$Motu == "Tiaraunu", "Tia", gps_site$Motu)
gps_site$Motu = ifelse(gps_site$Motu == "Tauini", "Tau", gps_site$Motu)
gps_site$Motu = ifelse(gps_site$Motu == "Hiranae", "Hir", gps_site$Motu)
gps_site$Motu = ifelse(gps_site$Motu == "Oroatera", "Oro", gps_site$Motu)
gps_site$Motu = ifelse(gps_site$Motu == "Onetahi", "One", gps_site$Motu)
gps_site$Motu = ifelse(gps_site$Motu == "Honuea", "Hon", gps_site$Motu)
unique(gps_site$Motu)

# update the site names to match what is in community_data and coral_data
gps_site = gps_site %>%
  mutate(Site_New = case_when(
    Motu == "Aie" & Site_number__focal_motus_ == 1 ~ "south",
    Motu == "Aie" & Site_number__focal_motus_ == 2 ~ "north",
    Motu == "Rei" & Site_number__focal_motus_ == 1 ~ "site1",
    Motu == "Rei" & Site_number__focal_motus_ == 2 ~ "site2",
    Motu == "Rim" & Site_number__focal_motus_ == 1 ~ "site1",
    Motu == "Rim" & Site_number__focal_motus_ == 2 ~ "site2",
    TRUE ~ NA_character_  # Default case if none of the conditions are met
  )) %>%
  relocate(Site_New, .after = Site_number__focal_motus_) %>%
  ungroup() %>%
  select(-Site_number__focal_motus_)

# update the community data to include the GPS coordinates (site centers)
# using a left join
community_data = community_data %>%
  left_join(gps_site, by = c("Motu", "Site" = "Site_New")) %>%
  rename(Description = Site.y) %>%
  select(-Data) %>%
  select(Contributors, Date, Time, Motu, Site, Description, 
         Longitude_mid, Latitude_mid, Acropora_arborescent,
         Acropora_corymbose, Favites_encrusting, Montipora_encrusting,
         Pavona_cactus, Pavona_varians, Porites_rus,
         Porites_massive_submassive, Sand, Dead_coral, Pavement, 
         Sand_rubble, CCA, Live_benthos, Turf, Macroalgae, Rubble)

# update the hard coral data to include GPS coordinates (site centers)
# using a left join
coral_data = coral_data %>%
  left_join(gps_site, by = c("Motu", "Site" = "Site_New")) %>%
  rename(Description = Site.y) %>%
  select(-Data) %>%
  select(Contributors, Date, Time, Motu, Site, Description, 
         Longitude_mid, Latitude_mid, Acropora_arborescent,
         Acropora_corymbose, Favites_encrusting, Montipora_encrusting,
         Pavona_cactus, Pavona_varians, Porites_rus,
         Porites_massive_submassive)

#### BIOGEOPHYSICAL COVARIATES ####
covariates = read.csv(here("Benthic_Analysis", "Data",
                           "Transect_Biogeophysical_Data.csv"))
str(covariates) 
str(gps_transect)

# add GPS data to the covariates based on the shared ArcGIS_name column
covariates = covariates %>%
  left_join(gps_transect, by = "ArcGIS_name")

# do some renaming
covariates = covariates %>%
  group_by(Motu, Site, Site_number__focal_motus_) %>%
  mutate(Longitude_mid = mean(Longitude),
         Latitude_mid = mean(Latitude),
         Depth = mean(Depth_Mean),
         Slope = mean(Slope_Mean),
         Slope_of_slope = mean(Slope_Slope_Mean),
         Offshore_distance = mean(Offshore_Distance),
         N15 = mean(N15_mean)) %>%
  rename(Description = Site,
         Site = Site_number__focal_motus_) %>%
  select(Contributors, Date, Time, Motu, Site, Description, 
         Longitude_mid, Latitude_mid, Depth, Slope,
         Slope_of_slope, Offshore_distance, N15) %>%
  distinct()

# change the motu names to match the benthic data (3 letter motu abbreviations)
covariates$Motu = ifelse(covariates$Motu == "Rimatuu", "Rim", covariates$Motu)
covariates$Motu = ifelse(covariates$Motu == "Reiono", "Rei", covariates$Motu)
covariates$Motu = ifelse(covariates$Motu == "Hiranae/Auroa", "Aur", covariates$Motu)
covariates$Motu = ifelse(covariates$Motu == "Tiaraunu", "Tia", covariates$Motu)
covariates$Motu = ifelse(covariates$Motu == "Tauini", "Tau", covariates$Motu)
covariates$Motu = ifelse(covariates$Motu == "Hiranae", "Hir", covariates$Motu)
covariates$Motu = ifelse(covariates$Motu == "Oroatera", "Oro", covariates$Motu)
covariates$Motu = ifelse(covariates$Motu == "Onetahi", "One", covariates$Motu)
covariates$Motu = ifelse(covariates$Motu == "Honuea", "Hon", covariates$Motu)
unique(covariates$Motu)

# add the intercardinal bearing information based on the location of motus 
# relative to the center of the atoll (-149.566622, -17.016428)
Motu = c("One", "Hon", "Tia", "Tau", "Aur", "Hir", "Oro", "Aie", "Rei", "Rim")
Bearing = c("WSW", "WNW", "NNW", "NNE", "NNE", "NNE", "NNE", "ENE", "SSE", "SSE")
intercardinal = data.frame(Motu, Bearing)

covariates = covariates %>%
  left_join(intercardinal, by = "Motu")

# remove intermediate products
rm(list = c("Motu", "Bearing", "intercardinal"))

#### CORRELATION CHECK ####
# first convert the factorial bearings to numeric values for the purposes 
# of the correlation check.
covariates$Bearing = as.factor(covariates$Bearing)
covariates$Intercardinal_bearing = as.numeric(covariates$Bearing)

# now keep only the columns we want for the check
corrdata = covariates %>%
  ungroup() %>%
  select(Depth, Slope, Slope_of_slope, Offshore_distance,
        Intercardinal_bearing, N15)

# check for correlation among the predictors
cormat = cor(corrdata, use = "complete.obs")

# save color palette
palette = pnw_palette("Shuksan2", 200, type = "continuous")

# create and save the full correlation plot
par(mar=c(0,0,0,0))
corrplot(cormat, method = "color", col = palette, type = "upper",
         order = "original", addCoef.col = "black", number.cex = 0.50, 
         number.digits = 2, tl.col = "black", tl.srt = 40, tl.cex = 0.8)

# slope and slope of slope are correlated with one another, we'll keep slope
# because it's we're more interested in this predictor and because it's less
# correlated with all other predictors 
corrdata2 = corrdata %>%
  select(-Slope_of_slope)

# check and plot the new correlation matrix
cormat2 = cor(corrdata2, use = "complete.obs")
corrplot(cormat2, method = "color", col = palette, type = "upper",
         order = "original", addCoef.col = "black", number.cex = 0.50, 
         number.digits = 2, tl.col = "black", tl.srt = 40, tl.cex = 0.8)
# save the last plot as a png with specified dimensions
Cairo(file = here("Benthic_Analysis", "Figures", "Correlation_Matrix.png"), 
      bg = "white", canvas = "white", type = "png", units = "in",
      width = 6, height = 6, pointsize = 12,  dpi = 600)
corrplot(cormat2, method = "color", col = palette, type = "upper",
         order = "original", addCoef.col = "black", number.cex = 0.50, 
         number.digits = 2, tl.col = "black", tl.srt = 40, tl.cex = 0.8)
dev.off()

#### COMPILE THE FINAL DATASET ####
community_data = community_data %>%
  left_join(covariates, 
            by = c("Contributors", "Date", "Time", "Motu",
                   "Description", "Longitude_mid", "Latitude_mid")) %>%
  select(-Intercardinal_bearing, -Site.y, -Slope_of_slope) %>%
  rename(Intercardinal_bearing = Bearing,
         Site = Site.x)

coral_data = coral_data %>%
  left_join(covariates, 
            by = c("Contributors", "Date", "Time", "Motu",
                   "Description", "Longitude_mid", "Latitude_mid")) %>%
  select(-Intercardinal_bearing, -Site.y, -Slope_of_slope) %>%
  rename(Intercardinal_bearing = Bearing,
         Site = Site.x)

# save the RQ1 benthic community composition dataset as a csv
write.csv(community_data,
          here("Benthic_Analysis", "Data", 
               "Benthic_Community_Composition_RQ1.csv"),
          row.names = FALSE)

# save the RQ2 hard coral composition dataset as a csv
write.csv(coral_data,
          here("Benthic_Analysis", "Data", 
               "Hard_Coral_Composition_RQ2.csv"),
          row.names = FALSE)

save.image(here("Benthic_Analysis", "Data", "01_data_preprocessing.RData"))
